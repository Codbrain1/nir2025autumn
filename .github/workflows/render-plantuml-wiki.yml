name: Render PlantUML Diagrams in Wiki

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  render-plantuml-wiki:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Wiki repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}.wiki
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install curl for URL validation
        run: sudo apt-get update && sudo apt-get install -y curl
      - name: List Wiki files
        run: |
          echo "Listing files in Wiki repository:"
          ls -la *.md || echo "No .md files found"
      - name: Show file contents
        run: |
          echo "Contents of .md files:"
          for file in *.md; do
            if [ -f "$file" ]; then
              echo "File: $file"
              cat "$file"
              echo "----"
            fi
          done
      - name: Process PlantUML diagrams
        run: |
          mkdir -p diagrams
          counter=0
          python3 - <<EOF
          import re
          import zlib
          import base64
          import os
          import subprocess

          def encode_plantuml(text):
              compressed = zlib.compress(text.encode())[2:-4]
              encoded = base64.b64encode(compressed).decode('ascii').replace('+', '-').replace('/', '_')
              return f"http://www.plantuml.com/plantuml/svg/{encoded}"

          def is_valid_url(url):
              result = subprocess.run(['curl', '--output', '/dev/null', '--silent', '--head', '--fail', url], capture_output=True)
              return result.returncode == 0

          counter = 0
          for file in os.listdir('.'):
              if file.endswith('.md') and os.path.isfile(file):
                  with open(file, 'r', encoding='utf-8-sig') as f:
                      content = f.read()
                  if '```plantuml' not in content:
                      print(f"No PlantUML blocks or file not found: {file}")
                      continue
                  print(f"Processing {file}")
                  # Извлекаем все блоки plantuml
                  blocks = re.findall(r'``` *plantuml\n(.*?)\n```', content, re.DOTALL)
                  for diagram in blocks:
                      cleaned_diagram = '\n'.join(line.strip() for line in diagram.splitlines() if line.strip())
                      if '@startuml' in cleaned_diagram and '@enduml' in cleaned_diagram:
                          print(f"Found PlantUML diagram in {file}:")
                          print(cleaned_diagram)
                          with open('temp.puml', 'w', encoding='utf-8') as f:
                              f.write(cleaned_diagram)
                          url = encode_plantuml(cleaned_diagram)
                          with open('diagrams/urls.txt', 'a') as f:
                              f.write(f"Generated URL: {url}\n")
                          if is_valid_url(url):
                              print(f"URL is valid: {url}")
                          else:
                              print(f"URL is invalid (404 or other error): {url}")
                              exit(1)
                          # Удаляем старые ![Diagram]
                          content = re.sub(r'!\[Diagram\]\(.*?\)', '', content)
                          # Добавляем новый ![Diagram] после блока
                          block_end = content.find(diagram) + len(diagram) + len('```\n')
                          content = content[:block_end] + f'![Diagram]({url})\n' + content[block_end:]
                          with open(file, 'w', encoding='utf-8') as f:
                              f.write(content)
                          counter += 1
                      else:
                          print(f"Skipping invalid or incomplete PlantUML block in {file}: [{cleaned_diagram}]")
                  globals()['counter'] = counter
          print(f"Processed {counter} diagrams")
          EOF
      - name: Show modified files
        run: |
          echo "Modified files:"
          git status
          echo "Contents of modified .md files:"
          for file in *.md; do
            if [ -f "$file" ]; then
              echo "File: $file"
              cat "$file"
              echo "----"
            fi
          done
      - name: Commit changes to Wiki
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add *.md diagrams/
          git commit -m "Update Wiki with PlantUML diagrams" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
