name: Render PlantUML Diagrams in Wiki

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  render-plantuml-wiki:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Wiki repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}.wiki
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install curl for URL validation
        run: sudo apt-get update && sudo apt-get install -y curl
      - name: List Wiki files
        run: |
          echo "Listing files in Wiki repository:"
          ls -la *.md || echo "No .md files found"
      - name: Show file contents
        run: |
          echo "Contents of .md files:"
          for file in *.md; do
            if [ -f "$file" ]; then
              echo "File: $file"
              cat "$file"
              echo "----"
            fi
          done
      - name: Process PlantUML diagrams
        run: |
          mkdir -p diagrams
          counter=0
          for file in *.md; do
            if [ -f "$file" ] && grep -q '``` *plantuml' "$file"; then
              echo "Processing $file"
              # Извлекаем все блоки plantuml как единые строки
              awk '/``` *plantuml/{flag=1; block=""; next} /```/{if (flag) {print block; flag=0; next}} flag{block=block $0 "\n"} END {if (flag) print block}' "$file" > temp_diagrams.txt
              while IFS= read -r diagram || [[ -n "$diagram" ]]; do
                # Очищаем блок от лишних символов
                cleaned_diagram=$(echo -e "$diagram" | sed 's/^[ \t]*//;s/[ \t]*$//;s/\r$//' | grep -v '^$')
                if [[ -n "$cleaned_diagram" && "$cleaned_diagram" =~ @startuml.*@enduml ]]; then
                  echo "Found PlantUML diagram in $file:"
                  echo "$cleaned_diagram"
                  echo -e "$cleaned_diagram" > temp.puml
                  # Удаляем BOM и пустые строки
                  sed -i 's/\xEF\xBB\xBF//' temp.puml
                  sed -i '/^$/d' temp.puml
                  encoded=$(python3 -c "import zlib, base64; text = open('temp.puml', 'rb').read(); compressed = zlib.compress(text)[2:-4]; print(base64.b64encode(compressed).decode('ascii').replace('+', '-').replace('/', '_'))")
                  url="http://www.plantuml.com/plantuml/svg/$encoded"
                  echo "Generated URL: $url" >> diagrams/urls.txt
                  # Проверяем доступность URL
                  if curl --output /dev/null --silent --head --fail "$url"; then
                    echo "URL is valid: $url"
                  else
                    echo "URL is invalid (404 or other error): $url"
                    exit 1
                  fi
                  # Удаляем старые некорректные ![Diagram]
                  sed -i '/!\[Diagram\](.*~h.*)/d' "$file"
                  # Проверяем наличие ![Diagram]
                  if grep -A1 '``` *plantuml' "$file" | grep -q '!$$ Diagram $$'; then
                    echo "Replacing existing ![Diagram] in $file"
                    sed -i "/\`\`\` *plantuml/,/\`\`\`/ s|!$$ Diagram $$.*|<image-card alt="Diagram" src="$url" ></image-card>|" "$file"
                  else
                    echo "Appending ![Diagram] after plantuml block in $file"
                    sed -i "/\`\`\` *plantuml/,/\`\`\`/ {/\`\`\`/ s|$|\n<image-card alt="Diagram" src="$url" ></image-card>|}" "$file"
                  fi
                  counter=$((counter + 1))
                else
                  echo "Skipping invalid or incomplete PlantUML block in $file: [$cleaned_diagram]"
                fi
              done < temp_diagrams.txt
            else
              echo "No PlantUML blocks or file not found: $file"
            fi
          done
          echo "Processed $counter diagrams"
      - name: Show modified files
        run: |
          echo "Modified files:"
          git status
          echo "Contents of modified .md files:"
          for file in *.md; do
            if [ -f "$file" ]; then
              echo "File: $file"
              cat "$file"
              echo "----"
            fi
          done
      - name: Commit changes to Wiki
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add *.md diagrams/
          git commit -m "Update Wiki with PlantUML diagrams" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
